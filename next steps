
# fillna strategy OK
# create log
# risk management
self.transpose as obsolete
self.after header as obsolete

delete terms, translate   OK
use multiple date masks OK
finish date  OK
finish volume OK
apply index
cutoff dates based on forecasts
up sampling



1) prepare input spreadsheet OK
2) load json objects OK
refactor json constructors to Base
3) load individual inputs
4) assign budgets


import pandas as pd
import datetime
import glb_var.addresses
import json




import pandas as pd
from Dataset.BaseDataset import BaseDataset
from Dataset.Directory import Directory
from Dataset.Column import MyColumn
import Dataset.utils
import glb_var.dict_names
import glb_var.clmn
import glb_var.addresses
import glb_var.others
import json
import datetime

pd.set_option('display.max_columns', 100)


class RawDataset(BaseDataset):
    def __init__(self, name, input_directory, column_list, source_name, source_timestamp, to_be_transposed, use_cols,
                 skip_row_bf_header, skip_row_af_header, spreadsheet_encoding, index_col, spreadsheet_decimal,
                 mytimestamp=datetime.datetime.now()):
        super().__init__(name, input_directory, column_list, mytimestamp)
        self.source_name = source_name # string
        self.source_timestamp = source_timestamp # timestamp
        self.to_be_transposed = to_be_transposed # bool
        self.usecols = use_cols # string
        self.skip_row_bf_header = skip_row_bf_header # int
        self.skip_row_af_header = skip_row_af_header # int
        self.encoding = spreadsheet_encoding # string
        self.index_col = index_col # string
        self.decimal = spreadsheet_decimal # string
        self.mycolumn_dict_list = [] #my column list
        # dict = {MYCOLUMN:
        #         CLMN_INPUT:
        #         CLMN_INPUT_STR:
        #         CLMN_MULTIPLIER:}

    def __str__(self):
        out_str = ''
        return super(RawDataset, self).__str__() + out_str

    @staticmethod
    def load_mycolumn_dict_list(var_column_list, input_list, input_str_list, multiplier_list):
        any_mycolumn_dict_list = []

        for ii in range(0, len(var_column_list)):
            dict_to_append = {glb_var.dict_names.MYCOLUMN:  MyColumn.load_from_json(var_column_list[ii]),
                              glb_var.dict_names.CLMN_INPUT: input_list[ii],
                              glb_var.dict_names.CLMN_INPUT_STR: input_str_list[ii],
                              glb_var.dict_names.CLMN_MULTIPLIER: multiplier_list[ii]
                             }
            any_mycolumn_dict_list.append(dict_to_append)
        return any_mycolumn_dict_list

    @staticmethod
    def load_from_spreadsheet(address, sheet, dataset_name):
        any_df = pd.read_excel(address, sheet_name=sheet)

        cond_name = any_df[glb_var.clmn.DATASET] == dataset_name
        cond = cond_name
        any_df = any_df[cond]
        any_df = any_df.reset_index(drop=True)

        any_raw_dataset = RawDataset(name=any_df.loc[0, glb_var.clmn.DATASET],
                                     input_directory=Directory(folder=any_df.loc[0, glb_var.clmn.FOLDER],
                                                               file=any_df.loc[0, glb_var.clmn.FILE],
                                                               myformat=any_df.loc[0, glb_var.clmn.FORMAT],
                                                               sheet=any_df.loc[0, glb_var.clmn.SHEET]
                                                               ),
                                     column_list=[],
                                     source_name=any_df.loc[0, glb_var.clmn.SOURCE_NAME],
                                     source_timestamp=any_df.loc[0, glb_var.clmn.SOURCE_TIMESTAMP],
                                     to_be_transposed=any_df.loc[0, glb_var.clmn.TO_BE_TRANSPOSED],
                                     use_cols=any_df.loc[0, glb_var.clmn.USECOLS],
                                     skip_row_bf_header=any_df.loc[0, glb_var.clmn.SKIPROW_BF_HEADER],
                                     skip_row_af_header=any_df.loc[0, glb_var.clmn.SKIPROW_AF_HEADER],
                                     spreadsheet_encoding=any_df.loc[0, glb_var.clmn.ENCODING],
                                     index_col=any_df.loc[0, glb_var.clmn.INDEX_COL],
                                     spreadsheet_decimal=any_df.loc[0, glb_var.clmn.DECIMAL])

        df_clmn = any_df[glb_var.clmn.COLUMN_NAME_LIST]
        df_clmn = df_clmn.dropna(axis=1, how='all')

        for any_clmn in df_clmn.columns:
            dict_to_append = {glb_var.dict_names.MYCOLUMN: MyColumn.load_from_json(df_clmn.loc[0, any_clmn]),
                              glb_var.dict_names.CLMN_INPUT: df_clmn.loc[1, any_clmn],
                              glb_var.dict_names.CLMN_INPUT_STR: df_clmn.loc[2, any_clmn],
                              glb_var.dict_names.CLMN_MULTIPLIER: df_clmn.loc[3, any_clmn]}
            any_raw_dataset.mycolumn_dict_list.append(dict_to_append)

        return any_raw_dataset

    def to_dict(self):
        # mycolumn dict list will be only have var_names and mycolumns will be loaded later

        any_dict = {glb_var.dict_names.DATASET_NAME: self.name,
                    glb_var.dict_names.DIRECTORY: self.directory.to_dict(),
                    glb_var.dict_names.COLUMN_LIST: self.column_list,
                    glb_var.dict_names.BASE_DATASET_TIMESTAMP: str(self.mytimestamp),
                    glb_var.dict_names.SOURCE_NAME: self.source_name,
                    glb_var.dict_names.SOURCE_TIMESTAMP: str(self.source_timestamp),
                    glb_var.dict_names.TO_BE_TRANSPOSED: self.to_be_transposed,
                    glb_var.dict_names.USE_COLS: self.usecols,
                    glb_var.dict_names.SKIP_ROW_BF_HEADER: self.skip_row_bf_header,
                    glb_var.dict_names.SKIP_ROW_AF_HEADER: self.skip_row_af_header,
                    glb_var.dict_names.ENCODING: self.encoding,
                    glb_var.dict_names.INDEX_COL: self.index_col,
                    glb_var.dict_names.DECIMAL: self.decimal,
                    glb_var.dict_names.MYCOLUMN_DICT_LIST: MyColumn.to_dict_list(self.mycolumn_dict_list)
                    }

        return any_dict

    def write_as_json(self):
        address = glb_var.addresses.RAW_JSON_ADDRESS + '/' + self.name + glb_var.addresses.JSON_FORMAT
        with open(address, "w") as outfile:
            json.dump(self.to_dict(), outfile, indent=glb_var.addresses.JSON_INDENT)
        return

    @staticmethod
    def load_from_json(name):
        address = glb_var.addresses.RAW_JSON_ADDRESS + '/' + name + glb_var.addresses.JSON_FORMAT
        with open(address, "r") as outfile:
            content = outfile.read()

        any_dict = json.loads(content)
        any_raw_dataset = RawDataset.from_dict(any_dict)

        return any_raw_dataset

    @staticmethod
    def from_dict(any_dict):
        any_raw_dataset = RawDataset(name=any_dict[glb_var.dict_names.DATASET_NAME],
                                     input_directory=any_dict[glb_var.dict_names.DIRECTORY],
                                     column_list=any_dict[glb_var.dict_names.COLUMN_LIST],
                                     mytimestamp=Dataset.utils.convert_string_to_timestamp(
                                                           any_date=any_dict[glb_var.dict_names.BASE_DATASET_TIMESTAMP],
                                                           any_format=glb_var.others.TIMESTAMP_FORMAT),
                                     source_name=any_dict[glb_var.dict_names.SOURCE_NAME],
                                     source_timestamp=datetime.datetime.strptime(
                                         any_dict[glb_var.dict_names.SOURCE_TIMESTAMP],
                                         glb_var.others.TIMESTAMP_FORMAT),
                                     to_be_transposed=any_dict[glb_var.dict_names.TO_BE_TRANSPOSED],
                                     use_cols=any_dict[glb_var.dict_names.USE_COLS],
                                     skip_row_bf_header=any_dict[glb_var.dict_names.SKIP_ROW_BF_HEADER],
                                     skip_row_af_header=any_dict[glb_var.dict_names.SKIP_ROW_AF_HEADER],
                                     spreadsheet_encoding=any_dict[glb_var.dict_names.ENCODING],
                                     index_col=any_dict[glb_var.dict_names.INDEX_COL],
                                     spreadsheet_decimal=any_dict[glb_var.dict_names.DECIMAL]
                                     )
        return any_raw_dataset
